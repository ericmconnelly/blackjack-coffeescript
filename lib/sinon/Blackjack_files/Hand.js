// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Hand = (function(superClass) {
    extend(Hand, superClass);

    function Hand() {
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      var theCard;
      theCard = this.deck.pop();
      this.add(theCard);
      if (this.minScore() > 21) {
        this.trigger("busted");
      }
      return theCard;
    };

    Hand.prototype.hasAce = function() {
      return this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, 0);
    };

    Hand.prototype.handleDealer = function() {
      console.log('handling dealer');
      this.at(0).flip();
      while (this.minScore() < 17) {
        this.hit();
      }
      if (this.minScore() <= 21) {
        return this.trigger("finished");
      }
    };

    Hand.prototype.minScore = function() {
      return this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
    };

    Hand.prototype.bestScore = function() {
      return Math.max(this.scores()[0], this.scores()[1]);
    };

    Hand.prototype.scores = function() {
      return [this.minScore(), this.minScore() + 10 * this.hasAce()];
    };

    Hand.prototype.stand = function() {
      console.log("hand to dealer");
      return this.trigger("handToDealer");
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=Hand.js.map
